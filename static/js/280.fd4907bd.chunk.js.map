{"version":3,"file":"static/js/280.fd4907bd.chunk.js","mappings":"kNAEaA,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAAnB,EAEvBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAEnBC,EAAuB,SAAAL,GAAK,OAAIA,EAAMM,OAAOC,WAAjB,EAE5BC,EAAyB,SAAAR,GACpC,IAAMC,EATsB,SAAAD,GAAK,OAAIA,EAAMC,SAASA,QAAnB,CAShBQ,CAAeT,GAC1BO,EAAcF,EAAqBL,GAEzC,OAAOC,EAASK,QACd,SAAAI,GAAO,MACW,KAAhBH,GACAG,EAAQC,KAAKC,cAAcC,SAASN,EAAYK,cAF3C,GAIV,E,UChBD,EAAiC,2CAAjC,EAAqG,mD,SCgCrG,EA3B2B,SAAAE,GACzB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,gBAAIC,UAAWC,EAAf,WACE,uBAAIJ,EAAMH,QACV,uBAAIG,EAAMK,SACV,mBACEF,UAAWC,EACXE,KAAK,SACLC,QAXuB,WAC3BN,GAASO,EAAAA,EAAAA,IAAcR,EAAMS,IAC9B,EAMG,sBASL,ECzBD,EAA8B,iCCsC9B,EAhCoB,WAClB,IAAMC,GAAmBC,EAAAA,EAAAA,IAAYjB,GAErC,OACE,eAAIS,UAAWC,EAAf,SACGM,EAAiBE,OAChBF,EAAiBG,KAAI,SAAAjB,GAAO,OAC1B,SAAC,EAAD,CAEEa,GAAIb,EAAQkB,UACZjB,KAAMD,EAAQC,KACdQ,MAAOT,EAAQS,OAHVT,EAAQkB,UAFW,KAS5B,uEAIP,ECzBD,EAAyB,uBAAzB,EAAgE,8B,UC+BhE,EA1Be,WACb,IAAMb,GAAWC,EAAAA,EAAAA,MACXV,GAASmB,EAAAA,EAAAA,IAAYpB,GAM3B,OACE,iBAAKY,UAAWC,EAAhB,WACE,oDACA,kBACED,UAAWC,EACXK,GAAG,SACHM,MAAOvB,EACPwB,SAXsB,SAAAC,GAC1BhB,GAASiB,EAAAA,EAAAA,GAAkBD,EAAME,OAAOJ,OACzC,EAUKT,KAAK,OACLT,KAAK,SACLuB,QAAQ,oWACRC,MAAM,yIACNC,UAAQ,MAIf,E,mBC7BD,EAA8B,iCAA9B,EAAoF,wCAApF,EAAiJ,wCAAjJ,EAA+M,yCCqE/M,EA9DoB,WAClB,IAAMrB,GAAWC,EAAAA,EAAAA,MA4BjB,OACE,kBAAMC,UAAWC,EAAiBmB,SA1Bf,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEL,OAWflB,GACE0B,EAAAA,EAAAA,IAAW,CACT9B,KAAM6B,EAAKE,SAAS/B,KAAKkB,MACzBV,MAAOqB,EAAKE,SAASC,OAAOd,SAGhCW,EAAKI,OAIN,EAGC,WACE,kBAAO3B,UAAWC,EAAwB2B,QAAQ,OAAlD,mBAGA,kBACE5B,UAAWC,EACXK,GAAG,OACHH,KAAK,OACLT,KAAK,OACLuB,QAAQ,oWACRC,MAAM,yIACNC,UAAQ,KAEV,kBAAOnB,UAAWC,EAAwB2B,QAAQ,SAAlD,qBAGA,kBACE5B,UAAWC,EACXK,GAAG,SACHH,KAAK,MACLT,KAAK,SACLuB,QAAQ,iGACRC,MAAM,+FACNC,UAAQ,KAEV,mBAAQnB,UAAWC,EAAyBE,KAAK,SAAjD,2BAKL,EC5BD,EA9BqB,WACnB,IAAML,GAAWC,EAAAA,EAAAA,MACXd,GAAYuB,EAAAA,EAAAA,IAAY1B,GACxBK,GAAQqB,EAAAA,EAAAA,IAAYtB,GAM1B,OAJA2C,EAAAA,EAAAA,YAAU,WACR/B,GAASgC,EAAAA,EAAAA,MACV,GAAE,CAAChC,KAGF,iBACEiC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,cAAe,SACfC,IAAK,OACLC,WAAY,SACZC,QAAS,QAPb,WAUE,uCACA,SAAC,EAAD,KACA,sCACA,SAAC,EAAD,IACCpD,IAAcE,IAAS,SAAC,IAAD,KACxB,SAAC,EAAD,MAGL,C","sources":["redux/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactListElement/ContactListElement.module.css?1371","components/ContactListElement/ContactListElement.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filter.filterQuery;\n\nexport const selectFilteredContacts = state => {\n  const contacts = selectContacts(state);\n  const filterQuery = selectContactsFilter(state);\n\n  return contacts.filter(\n    contact =>\n      filterQuery === '' ||\n      contact.name.toLowerCase().includes(filterQuery.toLowerCase())\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactElement\":\"ContactListElement_contactElement__fdkob\",\"contactElement__button\":\"ContactListElement_contactElement__button__YIm+7\"};","import React from 'react';\nimport propTypes from 'prop-types';\nimport css from './ContactListElement.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nconst ContactListElement = props => {\n  const dispatch = useDispatch();\n\n  const ContactDeleteHandler = () => {\n    dispatch(deleteContact(props.id));\n  };\n\n  return (\n    <li className={css.contactElement}>\n      <p>{props.name}</p>\n      <p>{props.phone}</p>\n      <button\n        className={css.contactElement__button}\n        type=\"button\"\n        onClick={ContactDeleteHandler}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListElement.propTypes = {\n  name: propTypes.string.isRequired,\n  phone: propTypes.string.isRequired,\n};\n\nexport default ContactListElement;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactlist\":\"ContactList_contactlist__zx6vn\"};","import React from 'react';\nimport ContactListElement from 'components/ContactListElement/ContactListElement';\nimport propTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul className={css.contactlist}>\n      {filteredContacts.length ? (\n        filteredContacts.map(contact => (\n          <ContactListElement\n            key={contact.contactId}\n            id={contact.contactId}\n            name={contact.name}\n            phone={contact.phone}\n          />\n        ))\n      ) : (\n        <p>Your phonebook is empty. Add your contacts</p>\n      )}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  list: propTypes.arrayOf(\n    propTypes.shape({\n      key: propTypes.string,\n      name: propTypes.string.isRequired,\n      phone: propTypes.string.isRequired,\n      deleteContact: propTypes.func,\n    })\n  ),\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filter__field\":\"Filter_filter__field__fujd7\"};","import React from 'react';\nimport css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setContactsFilter } from 'redux/filterSlice';\nimport { selectContactsFilter } from 'redux/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const filterChangeHandler = event => {\n    dispatch(setContactsFilter(event.target.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <h3>Find contacts by name:</h3>\n      <input\n        className={css.filter__field}\n        id=\"filter\"\n        value={filter}\n        onChange={filterChangeHandler}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-ZĄąĆćĘęŁłŃńÓóŚśŹźŻż]+(([' \\-][a-zA-ZĄąĆćĘęŁłŃńÓóŚśŹźŻż])?[a-zA-ZĄąĆćĘęŁłŃńÓóŚśŹźŻż]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactForm__label\":\"ContactForm_contactForm__label__LWT6p\",\"contactForm__field\":\"ContactForm_contactForm__field__+cOPR\",\"contactForm__button\":\"ContactForm_contactForm__button__C3X5B\"};","//Commented code in this file is the previous version of checking if the contact that we are adding is already in contacts\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport css from './ContactForm.module.css';\n// import { selectContacts } from './../../redux/selectors';\n// import Notiflix from 'notiflix';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  // const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    // const names = contacts.map(contact => contact.name.toLowerCase());\n    // const newContactName = form.elements.name.value.trim().toLowerCase();\n\n    // if (names.find(name => name === newContactName)) {\n    //   form.reset();\n    //   return Notiflix.Notify.failure(\n    //     `Contact with name '${newContactName}' is already in contacts.`\n    //   );\n    // }\n\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        phone: form.elements.number.value,\n      })\n    );\n    form.reset();\n    // Notiflix.Notify.success(\n    //   `Contact with name '${newContactName}' has been added succesfully to contacts list.`\n    // );\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={handleSubmit}>\n      <label className={css.contactForm__label} htmlFor=\"name\">\n        Name\n      </label>\n      <input\n        className={css.contactForm__field}\n        id=\"name\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-ZĄąĆćĘęŁłŃńÓóŚśŹźŻż]+(([' \\-][a-zA-ZĄąĆćĘęŁłŃńÓóŚśŹźŻż])?[a-zA-ZĄąĆćĘęŁłŃńÓóŚśŹźŻż]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label className={css.contactForm__label} htmlFor=\"number\">\n        Number\n      </label>\n      <input\n        className={css.contactForm__field}\n        id=\"number\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={css.contactForm__button} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading, selectError } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport ContactForm from 'components/ContactForm/ContactForm';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        gap: '20px',\n        alignItems: 'center',\n        padding: '20px',\n      }}\n    >\n      <h1>PhoneBook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <ClipLoader />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectIsLoading","state","contacts","isLoading","selectError","error","selectContactsFilter","filter","filterQuery","selectFilteredContacts","selectContacts","contact","name","toLowerCase","includes","props","dispatch","useDispatch","className","css","phone","type","onClick","deleteContact","id","filteredContacts","useSelector","length","map","contactId","value","onChange","event","setContactsFilter","target","pattern","title","required","onSubmit","e","preventDefault","form","addContact","elements","number","reset","htmlFor","useEffect","fetchContacts","style","display","justifyContent","flexDirection","gap","alignItems","padding"],"sourceRoot":""}